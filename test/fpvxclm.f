C*==fpvxclm.f    processed by SPAG 6.70Rc at 21:32 on 19 Dec 2016
      SUBROUTINE FPVXCLM(EXC,KTE,NSPIN,RHO2NS,VNEW,BNEW,RGNT_VSF,
     &                   LMRGNT_VSF,NRGNT_VSF_LM,NRGNT_VSF,Y_LEBGRID,
     &                   W_LEBGRID,N_LEBGRID,NMAX_LEBGRID)
C   ********************************************************************
C   *                                                                  *
C   * add the exchange-correlation-potential to the given potential    *
C   * and if total energies should be calculated (KTE=1) the exchange- *
C   * correlation-energies are calculated .                            *
C   * input RHO2NS(...,1) charge density x r**2                        *
C   *       RHO2NS(...,2) spin   density x r**2  (NSPIN=2)             *
C   *                                                                  *
C   * the density x 4 PI is generated on an angular mesh               *
C   * the exchange-correlation potential and the exchange-correlation  *
C   * energy are calculated at those mesh points with a subroutine .   *
C   * in the paramagnetic case the "spin-density" is set equal zero .  *
C   * after that the exchange-correlation potential and in the case of *
C   * total energies (kte=1) the exchange-correlation energy are       *
C   * expanded into spherical harmonics .                              *
C   * the ex.-cor. potential is added to the given potential .         *
C   * the expansion into spherical harmonics uses the orthogonality    *
C   * of these harmonics . - therefore a gauss-legendre integration    *
C   * for "theta" and a gauss-tschebyscheff integration for "phi"      *
C   * is used .                                                        *
C   * angular mesh and integration weights generated by <FPSPHERE>     *
C   *                                                                  *
C   * the ex.-cor. potential is extrapolated to the origin only        *
C   * for the lm=1 value .                                             *
C   *                                                                  *
C   * based on B. Drittler's routines                                  *
C   *                                                                  *
C   ********************************************************************
C
      USE MOD_SCF,ONLY:SCFVXC
      USE MOD_FILES,ONLY:IPRINT,IOTMP
      USE MOD_RMESH,ONLY:ISFLM,FLMSF,R,JRCUT,NPAN,KLMSF,NRMAX,JRNS1,
     &    DRDI_W_RADINT
      USE MOD_TYPES,ONLY:IMT,NTMAX,NLFP,NLFPMAX,NLMFP,NLMFPMAX,ITBOT,
     &    ITTOP
      USE MOD_CONSTANTS,ONLY:PI,CONST_4PI
      IMPLICIT NONE
C
C*** Start of declarations rewritten by SPAG
C
C PARAMETER definitions
C
      CHARACTER*40 ROUTINE
      PARAMETER (ROUTINE='FPVXCLM')
C
C Dummy arguments
C
      INTEGER KTE,NMAX_LEBGRID,NRGNT_VSF,NSPIN,N_LEBGRID
      REAL*8 BNEW(NRMAX,NLMFPMAX,NTMAX),EXC(0:(NLFPMAX-1),NTMAX),
     &       RGNT_VSF(NRGNT_VSF),RHO2NS(NRMAX,NLMFPMAX,NTMAX,3),
     &       VNEW(NRMAX,NLMFPMAX,NTMAX),W_LEBGRID(NMAX_LEBGRID,NLMFPMAX)
     &       ,Y_LEBGRID(NMAX_LEBGRID,NLMFPMAX)
      INTEGER LMRGNT_VSF(NRGNT_VSF,3),NRGNT_VSF_LM(0:NLMFPMAX)
C
C Local variables
C
      REAL*8 AGRDRHO(:,:),AGRDRHOD(:,:),AGRDRHOU(:,:),D2FDR2(:),DFDR(:),
     &       ELMXC,ER(:,:),ESTOR(:,:),EXCIJ(:),EXCIJGGA(:,:),FLM(:,:),
     &       FPIPR2,GDGAG(:,:),GDGAGD(:,:),GDGAGU(:,:),GFANG(:,:,:),
     &       GFLM(:,:,:),HANG(:,:),HLM(:,:),LAPRHO(:,:),LAPRHOD(:,:),
     &       LAPRHOU(:,:),RHO(:,:),RHO4PI(:,:),RHOD(:,:),RHOU(:,:),
     &       RPWM2(:),VLMXC,VLMXCAVR,VLMXCDIF,VLMXCDN,VLMXCUP,VXC(:,:),
     &       WEXCIJ(:,:),X
      REAL*8 DDOT
      CHARACTER*80 FILNAM
      LOGICAL GGA
      INTEGER I,IM,IPAN1,IR,IRMTIN,IRSF,IRTOP,ISF,ISPIN,IT,J,L,LL,LM,
     &        LM2,M,NANG,NR
      EXTERNAL DAXPY,DDOT
C
C*** End of declarations rewritten by SPAG
C
      ALLOCATABLE ER,ESTOR,EXCIJ,WEXCIJ,RHO4PI,VXC
      ALLOCATABLE RHO,RHOD,RHOU
      ALLOCATABLE AGRDRHO,AGRDRHOD,AGRDRHOU
      ALLOCATABLE LAPRHO,LAPRHOD,LAPRHOU
      ALLOCATABLE GDGAG,GDGAGD,GDGAGU
      ALLOCATABLE GFLM,GFANG,FLM,HLM,HANG,EXCIJGGA
      ALLOCATABLE RPWM2,DFDR,D2FDR2
C
      ALLOCATE (ER(NRMAX,0:(NLFPMAX-1)),ESTOR(NRMAX,NLMFPMAX))
      ALLOCATE (EXCIJ(NMAX_LEBGRID),RHO4PI(NMAX_LEBGRID,2))
      ALLOCATE (WEXCIJ(NMAX_LEBGRID,2),VXC(NMAX_LEBGRID,2))
C
C*** End of declarations rewritten by SPAG
C
C=======================================================================
C                      GGA - parametrisations
C=======================================================================
      IF ( SCFVXC(1:3).EQ.'PBE' .OR. SCFVXC(1:6).EQ.'EV-GGA' ) THEN
C
         GGA = .TRUE.
C
         NANG = NMAX_LEBGRID
         NR = NRMAX
         ALLOCATE (RHO(NANG,NR),RHOD(NANG,NR),RHOU(NANG,NR))
         ALLOCATE (AGRDRHO(NANG,NR),AGRDRHOD(NANG,NR),AGRDRHOU(NANG,NR))
         ALLOCATE (LAPRHO(NANG,NR),LAPRHOD(NANG,NR),LAPRHOU(NANG,NR))
         ALLOCATE (GDGAG(NANG,NR),GDGAGD(NANG,NR),GDGAGU(NANG,NR))
         ALLOCATE (GFLM(NR,NLMFP,3),GFANG(NANG,NR,3))
         ALLOCATE (FLM(NR,NLMFP),HLM(NR,NLMFP),HANG(NANG,NR))
         ALLOCATE (RPWM2(NRMAX),DFDR(NRMAX),D2FDR2(NRMAX))
         ALLOCATE (EXCIJGGA(NANG,NR))
         EXCIJGGA(1:NANG,1:NR) = 0.0D0
C
      ELSE
C
         GGA = .FALSE.
C
      END IF
C=======================================================================
C
      ER(1:NRMAX,0:(NLFPMAX-1)) = 0.0D0
      ESTOR(1:NRMAX,1:NLMFPMAX) = 0.0D0
C
C TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
C
      DO IT = ITBOT,ITTOP
C
         IF ( IPRINT.GT.0 ) THEN
            FILNAM = 'zzzzzz_Vxc_'
            CALL STRING_ADD_N(FILNAM,IT)
            LL = LEN_TRIM(FILNAM)
            FILNAM = FILNAM(1:LL)//'.dat'
            LL = LL + 4
            WRITE (6,99001) IT,FILNAM(1:LL)
            CALL OPEN_IOTMP_FILE(ROUTINE,IOTMP,FILNAM(1:LL))
            WRITE (IOTMP,99001) IT
         END IF
C
         IM = IMT(IT)
         IPAN1 = NPAN(IM)
         IRTOP = JRCUT(IPAN1,IM)
         IRMTIN = JRCUT(1,IM)
C
C---------------------------------------- initialize for ex.-cor. energy
C
         IF ( KTE.EQ.1 ) THEN
            DO L = 0,(NLFP-1)
               EXC(L,IT) = 0.0D0
               DO IR = 1,IRTOP
                  ER(IR,L) = 0.0D0
               END DO
            END DO
C
            DO LM = 1,NLMFP
               DO IR = 1,IRTOP
                  ESTOR(IR,LM) = 0.0D0
               END DO
            END DO
         END IF
C
C= LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA
         IF ( .NOT.GGA ) THEN
C
            DO IR = 1,IRTOP
C
C----------------------------- generate the densities on an angular mesh
C
               RHO4PI(1:N_LEBGRID,1:2) = 0.0D0
C
               FPIPR2 = CONST_4PI/R(IR,IM)**2
               DO ISPIN = 1,NSPIN
                  DO LM = 1,NLMFP
                     CALL DAXPY(N_LEBGRID,RHO2NS(IR,LM,IT,ISPIN)*FPIPR2,
     &                          Y_LEBGRID(1,LM),1,RHO4PI(1,ISPIN),1)
                  END DO
               END DO
C
C----------- interchange UP and DOWN to be consistent with <EXCVWN> etc.
C
               RHO4PI(1:N_LEBGRID,2) = -RHO4PI(1:N_LEBGRID,2)
C
               VXC(1:NMAX_LEBGRID,1:2) = 0.0D0
               EXCIJ(1:NMAX_LEBGRID) = 0.0D0
               WEXCIJ(1:NMAX_LEBGRID,1:2) = 0.0D0
C
C-------------------------------------- calculate the ex.-cor. potential
C
               IF ( SCFVXC.EQ.'NONE      ' ) THEN
C
C
               ELSE IF ( SCFVXC(1:3).EQ.'VBH' ) THEN
C
                  CALL EXCVBH(RHO4PI,VXC,EXCIJ,WEXCIJ,N_LEBGRID,
     &                        NMAX_LEBGRID)
C
               ELSE IF ( SCFVXC(1:3).EQ.'MJW' ) THEN
C
                  CALL EXCMJW(RHO4PI,VXC,EXCIJ,WEXCIJ,N_LEBGRID,
     &                        NMAX_LEBGRID,1)
C
               ELSE IF ( SCFVXC(1:3).EQ.'VWN' ) THEN
C
                  CALL EXCVWN(RHO4PI,VXC,EXCIJ,WEXCIJ,N_LEBGRID,
     &                        NMAX_LEBGRID)
C
C
               ELSE IF ( SCFVXC.EQ.'LIN-VWN   ' ) THEN
C
                  CALL EXCVWN(RHO4PI,VXC,EXCIJ,WEXCIJ,N_LEBGRID,
     &                        NMAX_LEBGRID)
C
               ELSE
C
                  CALL STOP_MESSAGE(ROUTINE,'SCFVXC = '//SCFVXC//
     &                              '  not known ')
C
               END IF
C
C---------------- expand the ex.-cor. potential into spherical harmonics
C
               IF ( NSPIN.EQ.1 ) THEN
C
                  DO LM = 1,NLMFP
                     VLMXC = DDOT(N_LEBGRID,VXC(1,1),1,W_LEBGRID(1,LM),
     &                       1)
                     VNEW(IR,LM,IT) = VNEW(IR,LM,IT) + VLMXC
                  END DO
C
               ELSE
C
                  DO LM = 1,NLMFP
C
                     VLMXCDN = DDOT(N_LEBGRID,VXC(1,1),1,W_LEBGRID(1,LM)
     &                         ,1)
                     VLMXCUP = DDOT(N_LEBGRID,VXC(1,2),1,W_LEBGRID(1,LM)
     &                         ,1)
C
                     IF ( LM.EQ.1 .AND. IR.EQ.1 .AND. IPRINT.GT.0 ) THEN
                        WRITE (IOTMP,'(a,i3,f30.20)')
     &                         ('v_xc',ISPIN,VXC(I,1),I=1,N_LEBGRID)
                        WRITE (IOTMP,'(a,i3,f30.20)')
     &                         ('v_xc',ISPIN,VXC(I,2),I=1,N_LEBGRID)
                     END IF
C
                     VLMXCAVR = 0.5D0*(VLMXCUP+VLMXCDN)
                     VLMXCDIF = 0.5D0*(VLMXCUP-VLMXCDN)
C
                     VNEW(IR,LM,IT) = VNEW(IR,LM,IT) + VLMXCAVR
                     BNEW(IR,LM,IT) = BNEW(IR,LM,IT) + VLMXCDIF
C
                  END DO
C
               END IF
C
C---> file er in case of total energies
C
               IF ( KTE.EQ.1 ) THEN
C
C----------------------- expand ex.-cor. energy into spherical harmonics
C
                  DO L = 0,(NLFP-1)
                     DO M = -L,L
                        LM = L*L + L + M + 1
                        ELMXC = DDOT(N_LEBGRID,EXCIJ,1,W_LEBGRID(1,LM),
     &                          1)
C
C---> multiply the lm-component of the ex.-cor. energy with the same
C     lm-component of the charge density times r**2 and sum over lm
C     this corresponds to an integration over the angles
C
                        IF ( IR.GT.IRMTIN ) THEN
                           ESTOR(IR,LM) = ELMXC
                        ELSE IF ( IR.LT.JRNS1(IM) ) THEN
                           IF ( LM.EQ.1 ) ER(IR,L) = ER(IR,L)
     &                          + RHO2NS(IR,LM,IT,1)*ELMXC
                        ELSE
                           ER(IR,L) = ER(IR,L) + RHO2NS(IR,LM,IT,1)
     &                                *ELMXC
                        END IF
                     END DO
                  END DO
C
               END IF
C
            END DO
C
C= LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA = LDA
C
         ELSE
C
C= GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA
C
            DO IR = 1,IRTOP
               RPWM2(IR) = 1D0/R(IR,IM)**2
            END DO
C
C----------- interchange UP and DOWN to be consistent with <EXCVWN> etc.
C
C=======================================================================
C                           spin UP density
C=======================================================================
C
C----------------------------- density  FLM  in real spherical harmonics
C
            DO LM = 1,NLMFP
               DO IR = 1,IRTOP
                  X = 0.5D0*RPWM2(IR)
C                 FLM(IR,LM) = (RHO2NS(IR,LM,IT,1)+RHO2NS(IR,LM,IT,2))*X
                  FLM(IR,LM) = (RHO2NS(IR,LM,IT,1)-RHO2NS(IR,LM,IT,2))*X
               END DO
            END DO
C
            CALL FPVXCLM_DERIVE(IM,IRTOP,RHOU,AGRDRHOU,LAPRHOU,GDGAGU,
     &                          GFLM,GFANG,FLM,HLM,HANG,RPWM2,DFDR,
     &                          D2FDR2,NLMFP,Y_LEBGRID,W_LEBGRID,
     &                          N_LEBGRID,NMAX_LEBGRID)
C
C=======================================================================
C                           spin DOWN density
C=======================================================================
C
            DO LM = 1,NLMFP
               DO IR = 1,IRTOP
                  X = 0.5D0*RPWM2(IR)
C                 FLM(IR,LM) = (RHO2NS(IR,LM,IT,1)-RHO2NS(IR,LM,IT,2))*X
                  FLM(IR,LM) = (RHO2NS(IR,LM,IT,1)+RHO2NS(IR,LM,IT,2))*X
               END DO
            END DO
C
            CALL FPVXCLM_DERIVE(IM,IRTOP,RHOD,AGRDRHOD,LAPRHOD,GDGAGD,
     &                          GFLM,GFANG,FLM,HLM,HANG,RPWM2,DFDR,
     &                          D2FDR2,NLMFP,Y_LEBGRID,W_LEBGRID,
     &                          N_LEBGRID,NMAX_LEBGRID)
C
C=======================================================================
C                           total density
C=======================================================================
C
            DO LM = 1,NLMFP
               DO IR = 1,IRTOP
                  X = RPWM2(IR)
                  FLM(IR,LM) = RHO2NS(IR,LM,IT,1)*X
               END DO
            END DO
C
            CALL FPVXCLM_DERIVE(IM,IRTOP,RHO,AGRDRHO,LAPRHO,GDGAG,GFLM,
     &                          GFANG,FLM,HLM,HANG,RPWM2,DFDR,D2FDR2,
     &                          NLMFP,Y_LEBGRID,W_LEBGRID,N_LEBGRID,
     &                          NMAX_LEBGRID)
C
C=======================================================================
C
            IF ( SCFVXC(1:3).EQ.'PBE' .OR. SCFVXC(1:6).EQ.'EV-GGA' )
     &           THEN
C
               DO IR = 1,IRTOP
C
                  VXC(1:NMAX_LEBGRID,1:2) = 0.0D0
                  WEXCIJ(1:NMAX_LEBGRID,1:2) = 0.0D0
C
                  CALL EXCPBE(VXC,EXCIJGGA(1,IR),WEXCIJ,N_LEBGRID,
     &                        NMAX_LEBGRID,RHO(1,IR),AGRDRHO(1,IR),
     &                        LAPRHO(1,IR),GDGAG(1,IR),RHOU(1,IR),
     &                        AGRDRHOU(1,IR),LAPRHOU(1,IR),GDGAGU(1,IR),
     &                        RHOD(1,IR),AGRDRHOD(1,IR),LAPRHOD(1,IR),
     &                        GDGAGD(1,IR))
C
                  X = 4.0D0*PI
                  WEXCIJ(1:N_LEBGRID,1:2) = X*WEXCIJ(1:N_LEBGRID,1:2)
C
C---------------- expand the ex.-cor. potential into spherical harmonics
C
                  IF ( NSPIN.EQ.1 ) THEN
C
                     DO LM = 1,NLMFP
                        VLMXC = DDOT(N_LEBGRID,VXC(1,1),1,
     &                          W_LEBGRID(1,LM),1)
                        VNEW(IR,LM,IT) = VNEW(IR,LM,IT) + VLMXC
                     END DO
C
                  ELSE
C
                     DO LM = 1,NLMFP
C
                        VLMXCDN = DDOT(N_LEBGRID,VXC(1,1),1,
     &                            W_LEBGRID(1,LM),1)
                        VLMXCUP = DDOT(N_LEBGRID,VXC(1,2),1,
     &                            W_LEBGRID(1,LM),1)
C
C
                        VLMXCAVR = 0.5D0*(VLMXCUP+VLMXCDN)
                        VLMXCDIF = 0.5D0*(VLMXCUP-VLMXCDN)
C
                        VNEW(IR,LM,IT) = VNEW(IR,LM,IT) + VLMXCAVR
                        BNEW(IR,LM,IT) = BNEW(IR,LM,IT) + VLMXCDIF
C
                     END DO
C
                  END IF
C
C---> file er in case of total energies
C
                  IF ( KTE.EQ.1 ) THEN
C
C----------------------- expand ex.-cor. energy into spherical harmonics
C
                     DO L = 0,(NLFP-1)
                        DO M = -L,L
                           LM = L*L + L + M + 1
                           ELMXC = DDOT(N_LEBGRID,EXCIJGGA(1,IR),1,
     &                             W_LEBGRID(1,LM),1)
C
C---> multiply the lm-component of the ex.-cor. energy with the same
C     lm-component of the charge density times r**2 and sum over lm
C     this corresponds to an integration over the angles
C
                           IF ( IR.GT.IRMTIN ) THEN
                              ESTOR(IR,LM) = ELMXC
                           ELSE IF ( IR.LT.JRNS1(IM) ) THEN
                              IF ( LM.EQ.1 ) ER(IR,L) = ER(IR,L)
     &                             + RHO2NS(IR,LM,IT,1)*ELMXC
                           ELSE
                              ER(IR,L) = ER(IR,L) + RHO2NS(IR,LM,IT,1)
     &                           *ELMXC
                           END IF
                        END DO
                     END DO
C
                  END IF
C
               END DO
C
            ELSE
C
               CALL STOP_MESSAGE(ROUTINE,'SCFVXC <> = PBE .OR. EV-GGA')
C
            END IF
C
         END IF
C= GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA = GGA
C
C
C
C--------------------- integrate er in case of total energies to get exc
C
         IF ( KTE.EQ.1 ) THEN
C
            DO L = 0,(NLFP-1)
               DO M = -L,L
                  LM = L*L + L + M + 1
C
C----------------------------------------- convolute with shape function
C
                  DO J = NRGNT_VSF_LM(LM-1) + 1,NRGNT_VSF_LM(LM)
                     LM2 = LMRGNT_VSF(J,2)
                     IF ( KLMSF(LMRGNT_VSF(J,3),IM).GT.0 ) THEN
                        ISF = ISFLM(LMRGNT_VSF(J,3),IM)
                        DO IR = IRMTIN + 1,IRTOP
                           IRSF = IR - IRMTIN
                           ER(IR,L) = ER(IR,L) + RHO2NS(IR,LM,IT,1)
     &                                *RGNT_VSF(J)*FLMSF(IRSF,ISF,IM)
     &                                *ESTOR(IR,LM2)
                        END DO
                     END IF
                  END DO
C
               END DO
C
               EXC(L,IT) = DDOT(IRTOP,ER(1,L),1,DRDI_W_RADINT(1,IM),1)
C
            END DO
C
         END IF
C
         IF ( IPRINT.GT.0 ) CLOSE (IOTMP)
C
      END DO
C TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
C
99001 FORMAT (/'# writing V_xc potential for atom type IT=',I2,:,/,
     &        '# to file ',A,/)
      END
C*==fpvxclm_derive.f    processed by SPAG 6.70Rc at 21:32 on 19 Dec 2016
      SUBROUTINE FPVXCLM_DERIVE(IM,IRTOP,RHO,AGRDRHO,LAPRHO,GDGAG,GFLM,
     &                          GFANG,FLM,HLM,HANG,RPWM2,DFDR,D2FDR2,
     &                          NLMFP,Y_LEBGRID,W_LEBGRID,N_LEBGRID,
     &                          NMAX_LEBGRID)
C   ********************************************************************
C   *                                                                  *
C   *  calculate the various derivatives of the charge density         *
C   *  needed for the GGA                                              *
C   *                                                                  *
C   *   FLM                 input:   RHO_L(r)                          *
C   *                                                                  *
C   *   RHO                 RHO without any additional factors         *
C   *   AGRDRHO             | grad RHO |                               *
C   *   LAPRHO              grad^2 RHO                                 *
C   *   GDGAG               grad RHO . grad | grad RHO |               *
C   *                                                                  *
C   ********************************************************************
C
      USE MOD_ANGMOM,ONLY:L_LM
      USE MOD_RMESH,ONLY:R,DRDI,JRCUT,NPAN,NRMAX
      USE MOD_TYPES,ONLY:NLMFPMAX
      IMPLICIT NONE
C
C*** Start of declarations rewritten by SPAG
C
C Dummy arguments
C
      INTEGER IM,IRTOP,NLMFP,NMAX_LEBGRID,N_LEBGRID
      REAL*8 AGRDRHO(NMAX_LEBGRID,NRMAX),D2FDR2(NRMAX),DFDR(NRMAX),
     &       FLM(NRMAX,NLMFP),GDGAG(NMAX_LEBGRID,NRMAX),
     &       GFANG(NMAX_LEBGRID,NRMAX,3),GFLM(NRMAX,NLMFP,3),
     &       HANG(NMAX_LEBGRID,NRMAX),HLM(NRMAX,NLMFP),
     &       LAPRHO(NMAX_LEBGRID,NRMAX),RHO(NMAX_LEBGRID,NRMAX),
     &       RPWM2(NRMAX),W_LEBGRID(NMAX_LEBGRID,NLMFPMAX),
     &       Y_LEBGRID(NMAX_LEBGRID,NLMFPMAX)
C
C Local variables
C
      REAL*8 DDOT
      INTEGER IANG,IC,IPAN,IR,IR1,KFVLM(:,:),KLM(:),L,LM,NR
      REAL*8 LXLP1,RSUM
      EXTERNAL DAXPY
C
C*** End of declarations rewritten by SPAG
C
      ALLOCATABLE KLM,KFVLM
      ALLOCATE (KLM(NLMFP),KFVLM(NLMFP,3))
      KLM(1:NLMFP) = 1
C
C----------------------------------------- density  RHO  on angular mesh
C
      RHO(:,:) = 0D0
      DO IR = 1,IRTOP
         DO LM = 1,NLMFP
            CALL DAXPY(N_LEBGRID,FLM(IR,LM),Y_LEBGRID(1,LM),1,RHO(1,IR),
     &                 1)
         END DO
      END DO
C
C------------------- density gradient  GFLM  in real spherical harmonics
C
      CALL GRAD_FLM(FLM,KLM,GFLM,KFVLM,NLMFP,IM)
C
C------------------------------ density gradient  GFANG  on angular mesh
C
      GFANG(:,:,:) = 0D0
      DO IC = 1,3
         DO IR = 1,IRTOP
            DO LM = 1,NLMFP
               CALL DAXPY(N_LEBGRID,GFLM(IR,LM,IC),Y_LEBGRID(1,LM),1,
     &                    GFANG(1,IR,IC),1)
            END DO
         END DO
      END DO
C
C----------------------- ABS of density gradient  GFANG  on angular mesh
C
      DO IR = 1,IRTOP
         DO IANG = 1,N_LEBGRID
            RSUM = 0D0
            DO IC = 1,3
               RSUM = RSUM + GFANG(IANG,IR,IC)*GFANG(IANG,IR,IC)
            END DO
            AGRDRHO(IANG,IR) = SQRT(RSUM)
         END DO
      END DO
C
C--------- Laplacian  HLM  of  density  FLM  in real spherical harmonics
C
      HLM(:,:) = 0D0
      DO LM = 1,NLMFP
         IF ( KLM(LM).NE.0 ) THEN
            L = L_LM(LM)
            LXLP1 = DBLE(L*(L+1))
C
            DO IPAN = 1,NPAN(IM)
               IR1 = JRCUT(IPAN-1,IM) + 1
               NR = JRCUT(IPAN,IM) - JRCUT(IPAN-1,IM)
               CALL CALCDFDR(FLM(IR1,LM),DFDR(IR1),DRDI(IR1,IM),NR)
               CALL CALCDFDR(DFDR(IR1),D2FDR2(IR1),DRDI(IR1,IM),NR)
            END DO
C
            DO IR = 1,IRTOP
               HLM(IR,LM) = 2*DFDR(IR)/R(IR,IM) + D2FDR2(IR)
     &                      - LXLP1*FLM(IR,LM)*RPWM2(IR)
            END DO
C
         ELSE
            HLM(:,LM) = 0D0
         END IF
      END DO
C
C------- LAPRHO:  grad^2 RHO Laplacian of  density  FLM  on angular mesh
C
      LAPRHO(:,:) = 0D0
      DO IR = 1,IRTOP
         DO LM = 1,NLMFP
            CALL DAXPY(N_LEBGRID,HLM(IR,LM),Y_LEBGRID(1,LM),1,
     &                 LAPRHO(1,IR),1)
         END DO
      END DO
C
C----------- ABS of density gradient  GFANG  in real spherical harmonics
C
      DO IR = 1,IRTOP
         DO LM = 1,NLMFP
C
            HLM(IR,LM) = DDOT(N_LEBGRID,AGRDRHO(1,IR),1,W_LEBGRID(1,LM),
     &                   1)
C
         END DO
      END DO
C
C--------------------- GFLM: grad | grad n | in real spherical harmonics
C
      CALL GRAD_FLM(HLM,KLM,GFLM,KFVLM,NLMFP,IM)
C
C------------------ GDGAG: grad RHO . grad | grad RHO |  on angular mesh
C
      GDGAG(:,:) = 0D0
      DO IC = 1,3
         HANG(:,:) = 0D0
         DO IR = 1,IRTOP
            DO LM = 1,NLMFP
               CALL DAXPY(N_LEBGRID,GFLM(IR,LM,IC),Y_LEBGRID(1,LM),1,
     &                    HANG(1,IR),1)
            END DO
         END DO
C
         DO IR = 1,IRTOP
            DO IANG = 1,N_LEBGRID
               GDGAG(IANG,IR) = GDGAG(IANG,IR) + GFANG(IANG,IR,IC)
     &                          *HANG(IANG,IR)
            END DO
         END DO
C
      END DO
C
      END
